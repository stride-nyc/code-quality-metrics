# .github/workflows/pr-size-analysis.yml
# PR Size Analysis - Real-time feedback to prevent problematic AI-generated code patterns
# Based on research by Ken Judy - https://github.com/yourrepo/your-article
# Licensed under CC BY 4.0

name: PR Size Analysis
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze-pr-size:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Analyze PR Size and Scope
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const additions = pr.additions || 0;
            const deletions = pr.deletions || 0;
            const changedFiles = pr.changed_files || 0;
            const totalChanges = additions + deletions;
            
            console.log(`Analyzing PR #${pr.number}: ${totalChanges} lines across ${changedFiles} files`);
            
            // Determine size category and generate recommendations
            let sizeLabel = 'small';
            let sizeEmoji = '🟢';
            let concerns = [];
            let recommendations = [];
            
            // Size-based analysis
            if (totalChanges > 1000) {
              sizeLabel = 'extra-large';
              sizeEmoji = '🔴';
              concerns.push('⚠️ **Very large PR** - High risk of introducing bugs and difficult to review thoroughly');
              recommendations.push('Consider breaking this into multiple smaller PRs focused on specific features or components');
              recommendations.push('If this is generated code, ensure proper validation and testing');
            } else if (totalChanges > 500) {
              sizeLabel = 'large';
              sizeEmoji = '🟠';
              concerns.push('⚠️ **Large PR** - May indicate batch acceptance of AI-generated code');
              recommendations.push('Review carefully for AI-generated patterns that should be broken down');
            } else if (totalChanges > 200) {
              sizeLabel = 'medium-large';
              sizeEmoji = '🟡';
              concerns.push('⚠️ **Medium-large PR** - Approaching the threshold for detailed review');
            } else if (totalChanges > 100) {
              sizeLabel = 'medium';
              sizeEmoji = '🟡';
            } else {
              sizeLabel = 'small';
              sizeEmoji = '🟢';
            }
            
            // File sprawl analysis
            if (changedFiles > 20) {
              concerns.push('⚠️ **Many files changed** - Possible scope creep or shotgun surgery pattern');
              recommendations.push('Consider if these changes could be split into focused, single-responsibility PRs');
            } else if (changedFiles > 10) {
              concerns.push('⚠️ **Multiple files changed** - Ensure changes are cohesive and related');
            }
            
            // AI-specific pattern detection
            const hasAIPatterns = (totalChanges > 500 && changedFiles > 10) || totalChanges > 1000;
            if (hasAIPatterns) {
              concerns.push('🤖 **Possible AI-generated batch** - Large changes across multiple files may indicate wholesale AI code acceptance');
              recommendations.push('If using AI tools, consider accepting smaller code blocks and making incremental commits');
              recommendations.push('Ensure proper code review and testing for AI-generated sections');
            }
            
            // Change ratio analysis
            const changeRatio = deletions > 0 ? (additions / deletions).toFixed(1) : 'N/A';
            let ratioInsight = '';
            if (deletions > 0) {
              if (additions / deletions > 3) {
                ratioInsight = ' (Mostly additions - new feature or expansion)';
              } else if (additions / deletions < 0.5) {
                ratioInsight = ' (Mostly deletions - cleanup or removal)';
              } else {
                ratioInsight = ' (Balanced changes - likely refactoring)';
              }
            }
            
            // Generate size recommendation
            const sizeGuidance = {
              'small': 'Ideal size for review and testing',
              'medium': 'Good size - manageable for thorough review',
              'medium-large': 'Consider if this could be split into smaller PRs',
              'large': 'Recommend breaking into smaller, focused changes',
              'extra-large': 'Strongly recommend splitting into multiple PRs'
            };
            
            // Build the comment
            const sections = [
              `## ${sizeEmoji} PR Size Analysis`,
              '',
              `**Size Classification:** ${sizeLabel}`,
              `**Total Changes:** ${totalChanges.toLocaleString()} lines (+${additions.toLocaleString()}, -${deletions.toLocaleString()})${ratioInsight}`,
              `**Files Changed:** ${changedFiles}`,
              `**Change Ratio:** ${changeRatio}`,
              '',
              `**Guidance:** ${sizeGuidance[sizeLabel]}`
            ];
            
            if (concerns.length > 0) {
              sections.push('', '### ⚠️ Concerns:');
              sections.push(...concerns.map(c => `- ${c}`));
            }
            
            if (recommendations.length > 0) {
              sections.push('', '### 💡 Recommendations:');
              sections.push(...recommendations.map(r => `- ${r}`));
            }
            
            // Add AI Code Drift context for larger PRs
            if (totalChanges > 200 || changedFiles > 8) {
              sections.push(
                '',
                '### 📊 AI Code Drift Prevention',
                '',
                'Large PRs can indicate problematic AI tool usage patterns. Consider:',
                '- Making smaller, incremental commits when using AI assistance',
                '- Breaking AI-generated code into logical, reviewable chunks',
                '- Ensuring test coverage for AI-generated sections',
                '',
                'Learn more: [AI Code Drift Metrics](https://github.com/yourrepo/your-article)'
              );
            } else {
              sections.push(
                '',
                '✅ **Good practices:** This PR size supports thorough review and reduces AI code drift risk.'
              );
            }
            
            sections.push(
              '',
              '---',
              '*Analysis by [AI Code Drift PR Size Analyzer](https://github.com/yourrepo/workflows) - Part of PDCA Framework for AI-Assisted Development*'
            );
            
            const comment = sections.join('\n');
            
            // Check if we already commented on this PR
            const existingComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = existingComments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Size Analysis')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
              console.log('Updated existing PR size analysis comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('Created new PR size analysis comment');
            }
            
            // Set output for potential use by other actions
            core.setOutput('size-label', sizeLabel);
            core.setOutput('total-changes', totalChanges);
            core.setOutput('files-changed', changedFiles);
            core.setOutput('has-concerns', concerns.length > 0 ? 'true' : 'false');